
cv <- function(CV = c("CV1","CV2","CV3"), df.y, y, env, part.env=1, 
               type = c("random","optmized"), 
               TS=NULL, seed=1234, f=.2,fold=10,
               method="OLS",H=NULL,A=NULL,
               nIter = 2E4,burnIn = 2E3,thin = 5,
               saveAt = 'FWCV_'){
  require(FW)
  #' --------------------------------------------------------------------------------------------------
  ##' Processing stage
  #' --------------------------------------------------------------------------------------------------
  df.y$gid = as.factor(df.y$gid)
  df.y$env = as.factor(df.y$env)
  
  yHat  = c()
  yHat. = c()
  ENVS  = nlevels(env)
  GIDS  = nlevels(df.y$gid)
  set.seed(seed)
  
  for(i in 1:fold){
    
    cat(paste("Starting fold",i,"at:",Sys.time(),"\n",sep=" "))
    df.ycopy = df.y
    
    #' --------------------------------------------------------------------------------------------------
    ##' Cross-validation type
    #' --------------------------------------------------------------------------------------------------
    if(CV == "CV3"){
      tenv <- unique(df.ycopy$env)[sample(1:ENVS, size = part.env, replace = TRUE)]
      df.ycopy$value[!(df.ycopy$env %in% tenv)] <- NA
      
      if(type == "random")  {tgid <- unique(df.ycopy$gid)[sample(1:GIDS, size = GIDS * f, replace = FALSE)]}
      if(type == "optmized"){tgid <- TS}
      df.ycopy$value[!(df.ycopy$gid %in% tgid)] <- NA
    }
    #' --------------------------------------------------------------------------------------------------
    if(CV == "CV2"){
      tenv <- unique(df.ycopy$env)[sample(1:ENVS, size = part.env, replace = TRUE)]
      df.ycopy$value[!(df.ycopy$env %in% tenv)] <- NA
      
      if(type == "random")  {tgid <- unique(df.ycopy$gid)[sample(1:length(y), size = length(y) * f, replace = FALSE)]}
      if(type == "optmized"){tgid <- TS}
      df.ycopy$value[!(df.ycopy$gid %in% tgid)] <- NA
    }
    #' --------------------------------------------------------------------------------------------------
    if(CV == "CV1"){
      if(type == "random")  {tgid <- unique(df.ycopy$gid)[sample(1:GIDS, size = GIDS * f, replace = FALSE)]}
      if(type == "optmized"){tgid <- TS}
      df.ycopy$value[!(df.ycopy$gid %in% tgid)] <- NA
    }
    #' --------------------------------------------------------------------------------------------------
    ##' Genomic enabled prediction of reaction norm
    #' -------------------------------------------------------------------------------------------------
    fit = FW(y   = df.ycopy$value,
             VAR = df.ycopy$gid,
             ENV = df.ycopy$env,
             method = method, 
             seed=seed,
             H = H,A = A,
             nIter =nIter, 
             thin=thin,burnIn = burnIn)
    
    yHat <- data.frame(obs= df.y$value, pred = fit$yhat, gid = df.y$gid, env=df.y$env,pop=NA, process=i)
   
    #' --------------------------------------------------------------------------------------------------
    # setting scenario comparisions
    #' --------------------------------------------------------------------------------------------------
    if(CV == "CV3"){
      yHat$pop[( df.ycopy$env %in% tenv)  &   (df.ycopy$gid %in% tgid)]   <- "KnowEnv|KnowGid"
      yHat$pop[!(df.ycopy$env %in% tenv)  &  !(df.ycopy$gid %in% tgid)]   <- "NewEnv|NewGid"
      yHat$pop[!(df.ycopy$env %in% tenv)  &   (df.ycopy$gid %in% tgid)]   <- "NewEnv|KnowGid"
      yHat$pop[ (df.ycopy$env %in% tenv)  &  !(df.ycopy$gid %in% tgid)]   <- "KnowEnv|NewGid"
    }
    if(CV == "CV2"){
      yHat$pop[( df.ycopy$env %in% tenv)  &   (df.ycopy$gid %in% tgid)]   <- "KnowEnv|KnowGid"
      yHat$pop[!(df.ycopy$env %in% tenv)  &  !(df.ycopy$gid %in% tgid)]   <- "NewEnv|NewGid"
      yHat$pop[!(df.ycopy$env %in% tenv)  &   (df.ycopy$gid %in% tgid)]   <- "NewEnv|KnowGid"
      yHat$pop[ (df.ycopy$env %in% tenv)  &  !(df.ycopy$gid %in% tgid)]   <- "KnowEnv|NewGid"
      
      
    }
    if(CV == "CV1"){
      yHat$pop[ (df.ycopy$gid %in% tgid)]   <- "KnowEnv|KnowGid"
      yHat$pop[!(df.ycopy$gid %in% tgid)]   <- "KnowEnv|NewGid"
    }
    
    yHat. <- rbind(yHat.,yHat)
    seed <- seed + i
  }
  #' --------------------------------------------------------------------------------------------------
  cat(paste("Complete at:",Sys.time(),"\n",sep=" "))
  cat(paste("---------------------------------------","\n",sep=""))
  return(list(yHat.=yHat.,beta=beta))
}
